//Example 3.1 has to be like this : 
#include <limits>
#include <iostream>
using namespace std;
int main(void)
{
	int num = __INT_MAX__ - 2;
	int cnt = 0;
	cout << "Integer overflow in C++:" << endl;  // the book texts has forgotten the 2nd << 
	cout << "Incrementing from " << num << endl;
	while (cnt < 5)
	{ num = num + 1;
	  cnt = cnt + 1;
	  cout << cnt << "   " << num << endl; }
	cout << "Thank you for worrying about integer limits" << endl;
	return 0;
}

//Another way to implement it is :
#include <climits>
#include <iostream>
using namespace std;
int main(void)
{
	int num = INT_MAX - 2;
	int cnt = 0;
	cout << "Integer overflow in C++:" << endl;  // the book texts has forgotten the 2nd << 
	cout << "Incrementing from " << num << endl;
	while (cnt < 5)
	{ num = num + 1;
	  cnt = cnt + 1;
	  cout << cnt << "   " << num << endl; }
	cout << "Thank you for worrying about integer limits" << endl;
	return 0;
}
//A usefull command is 
// grep -r INT_MAX /usr/include/* | grep limits


//Example 5.3 should be like this, for my g++ compiler to accept it.
#include <iostream>
using namespace std;
int main(void)
{
	int  a[3], size[4]; 
	a[0]=11; a[1]=12; a[2]=13;
	size[1]=39;size[2]=40;size[3]=41;size[4]=42;
	for(int i=1;i<=4;i++) cout<<" "<<size[i];
	cout << endl;
	for(i=0;i<3;i++) cout<<" "<<a[i];
	cout<<endl;
	return 0;
}
//And by running 
//g++ -Wall -fpermissive  -o Chap5example5.3  Chap5example5.3.cpp
//the definition of int i inside the for loop is accepted , and an executable is produced.
//However I do not get the results that the book wants to show , I get 
39 40 41 42 
42 12 13
//which means that a[0] has assumed the 11 value , but it has been overwritten 
//by the overflow of element size[4] . If I were to define array size[5] , my x86_64 machine
//would allocate many more bytes for size[] , actually 8*sizeof(int) ,and to see the overflow
//I would have to make a main() like this
	int  i, a[3], size[7]; //size[5] or size[6] ...  up to size[8] is the same
	a[0]=11; a[1]=12; a[2]=13;
	size[1]=39;size[2]=40;size[3]=41;size[4]=42;
	size[5]=59;size[6]=60;size[7]=61;size[8]=62;
	for(i=1;i<=7;i++) cout<<" "<<size[i];
	cout << endl;
	for(i=0;i<3;i++) cout<<" "<<a[i];
	cout<<endl;
	return 0;
//with output 
 39 40 41 42 59 60 61 
 62 12 13


//Example 5.16 ,an improvement from the book code , using a function
#include <iostream>
#include <cstring>
using namespace std;
union StreetOrPOB	// alternative interpretations
{ char street[30];
  long int POB;   } ;
struct Address
{ char fullname[30];
  int kind;			// 0: street address; 1: P.O.B.
  StreetOrPOB second;  // either one or the another meaning
  char city[30];   } ;
void display(Address someadr)  //display function,not used in the book
{
	cout << someadr.fullname << endl;
	if (someadr.kind == 0)		// check data interpretation
		cout << someadr.second.street << endl;
	 else
		cout << "P.O.B. " << someadr.second.POB << endl;
	cout << someadr.city << endl;   cout << endl;
}
int main ()
{
	Address a1, a2;
	strcpy(a1.fullname,"Doe, John");
	strcpy(a1.second.street,"15 Oak Street"); a1.kind = 0;
	strcpy(a1.city,"Anytown, MA 02445");
	strcpy(a2.fullname,"King, Amy");
	a2.second.POB = 761; a2.kind = 1;		// address with POB
	strcpy(a2.city,"Anytown, MA 02445");
	display(a1);  //here the book has all the lines of code to display...
	display(a2);  //... and repeats them again , so I thought I could make a function!
	return 0;
}

//Example 6.5 , there are 2 mistakes (I corrected them on line 118 and 121 here)
#include <iostream>
using namespace std;
int main()
{
	int i;  int* pi; char* pc ;	// noninitialized pointers [the book has it: int i;int pi;char* pc; ]
	pi = &i;				// this turns pointer to i
	*pi = 502;				// this is ok, it effects in i = 502;
	if (*pi>0)   *pi = 28791;	//just a show off,same as: if(i>0) i=28791 [book has it : if(*pi>0) *pc=28791]
	pc = (char*) &i;			// some compilers don't need it
	int a1 = *pi;			// access to i through pointer
	int a2 = *pc;			// access to i through pointer
	cout << " i as decimal: " << i << endl
		 << " i as hex: " << hex << i << endl;
	cout << " i through int pointer: " << dec << a1 << endl;
	cout << " i through char pointer: " << a2 << endl;
	cout << " i through char pointer in hex: " << hex << a2 << endl;
	return 0;
}

