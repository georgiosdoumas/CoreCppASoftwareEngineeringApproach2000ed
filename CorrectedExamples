//Example 3.1 has to be like this : 
#include <limits>
#include <iostream>
using namespace std;
int main(void)
{
	int num = __INT_MAX__ - 2;
	int cnt = 0;
	cout << "Integer overflow in C++:" << endl;  // the book texts has forgotten the 2nd << 
	cout << "Incrementing from " << num << endl;
	while (cnt < 5)
	{ num = num + 1;
	  cnt = cnt + 1;
	  cout << cnt << "   " << num << endl; }
	cout << "Thank you for worrying about integer limits" << endl;
	return 0;
}

//Another way to implement it is :
#include <climits>
#include <iostream>
using namespace std;
int main(void)
{
	int num = INT_MAX - 2;
	int cnt = 0;
	cout << "Integer overflow in C++:" << endl;  // the book texts has forgotten the 2nd << 
	cout << "Incrementing from " << num << endl;
	while (cnt < 5)
	{ num = num + 1;
	  cnt = cnt + 1;
	  cout << cnt << "   " << num << endl; }
	cout << "Thank you for worrying about integer limits" << endl;
	return 0;
}
//A usefull command is 
// grep -r INT_MAX /usr/include/* | grep limits


//Example 5.3 should be like this, for my g++ compiler to accept it.
#include <iostream>
using namespace std;
int main(void)
{
	int  a[3], size[4]; 
	a[0]=11; a[1]=12; a[2]=13;
	size[1]=39;size[2]=40;size[3]=41;size[4]=42;
	for(int i=1;i<=4;i++) cout<<" "<<size[i];
	cout << endl;
	for(i=0;i<3;i++) cout<<" "<<a[i];
	cout<<endl;
	return 0;
}
//And by running 
//g++ -Wall -fpermissive  -o Chap5example5.3  Chap5example5.3.cpp
//the definition of int i inside the for loop is accepted , and an executable is produced.
//However I do not get the results that the book wants to show , I get 
39 40 41 42 
42 12 13
//which means that a[0] has assumed the 11 value , but it has been overwritten 
//by the overflow of element size[4] . If I were to define array size[5] , my x86_64 machine
//would allocate many more bytes for size[] , actually 8*sizeof(int) ,and to see the overflow
//I would have to make a main() like this
	int  i, a[3], size[7]; //size[5] or size[6] ...  up to size[8] is the same
	a[0]=11; a[1]=12; a[2]=13;
	size[1]=39;size[2]=40;size[3]=41;size[4]=42;
	size[5]=59;size[6]=60;size[7]=61;size[8]=62;
	for(i=1;i<=7;i++) cout<<" "<<size[i];
	cout << endl;
	for(i=0;i<3;i++) cout<<" "<<a[i];
	cout<<endl;
	return 0;
//with output 
 39 40 41 42 59 60 61 
 62 12 13


//Example 5.16 ,an improvement from the book code , using a function
#include <iostream>
#include <cstring>
using namespace std;
union StreetOrPOB	// alternative interpretations
{ char street[30];
  long int POB;   } ;
struct Address
{ char fullname[30];
  int kind;			// 0: street address; 1: P.O.B.
  StreetOrPOB second;  // either one or the another meaning
  char city[30];   } ;
void display(Address someadr)  //display function,not used in the book
{
	cout << someadr.fullname << endl;
	if (someadr.kind == 0)		// check data interpretation
		cout << someadr.second.street << endl;
	 else
		cout << "P.O.B. " << someadr.second.POB << endl;
	cout << someadr.city << endl;   cout << endl;
}
int main ()
{
	Address a1, a2;
	strcpy(a1.fullname,"Doe, John");
	strcpy(a1.second.street,"15 Oak Street"); a1.kind = 0;
	strcpy(a1.city,"Anytown, MA 02445");
	strcpy(a2.fullname,"King, Amy");
	a2.second.POB = 761; a2.kind = 1;		// address with POB
	strcpy(a2.city,"Anytown, MA 02445");
	display(a1);  //here the book has all the lines of code to display...
	display(a2);  //... and repeats them again , so I thought I could make a function!
	return 0;
}

//Example 6.5 , there are 2 mistakes (I corrected them on line 118 and 121 here)
#include <iostream>
using namespace std;
int main()
{
	int i;  int* pi; char* pc ;	// noninitialized pointers [the book has it: int i;int pi;char* pc; ]
	pi = &i;				// this turns pointer to i
	*pi = 502;				// this is ok, it effects in i = 502;
	if (*pi>0)   *pi = 28791;	//just a show off,same as: if(i>0) i=28791 [book has it : if(*pi>0) *pc=28791]
	pc = (char*) &i;			// some compilers will accept : pc = &i;
	int a1 = *pi;			// access to i through pointer
	int a2 = *pc;			// access to i through pointer
	cout << " i as decimal: " << i << endl
		 << " i as hex: " << hex << i << endl;
	cout << " i through int pointer: " << dec << a1 << endl;
	cout << " i through char pointer: " << a2 << endl;
	cout << " i through char pointer in hex: " << hex << a2 << endl;
	return 0;
}

//Example 6.10 , the book code was missing a brace }
//and the program would not compile. I found it , added it , and also did 
//all the improvements that were suggested in the next 2 pages of the book. It is 
//a habit for the writer to present a low quality solution initially , and add improvements
//in the next 2-3 pages of the original code , as he explains to the reader several stuff.
#include <iostream>
#include <iomanip>
using namespace std;
int main (void)
{
	const int NUM = 3;		// for exibition purposes (normally it should be larger)
	double  total = 0, *data;
	int count = 0, size = NUM;		// initialize current data
	data = new double[size];		// initial un-named array on the heap,is only NUM elements big
	do {				// do until zero is entered from user
		double amount;	//for user input
		cout << " Enter amount (or 0 to finish): ";
		cin >> amount;		// get next double value by user
		if (amount == 0) break;		// user wants to finish entering amounts
		if (count == size)		// lack of space, ask for more START 
		   { 
			double *q = new double[2*size];		//new pointer,points to doubled array size
			if (q == 0) 		      //for some reason new memory on the heap could not be allocated
				{ cout <<" Out of heap memory: input was terminated" <<endl;break; }
			else 						//new pointer q was succesfully created...
			   {
				cout << "More memory allocated: size = " << size  //...so inform the user about this
					 << " at position " << q << endl;  //not in the book,put it for demonstration
				for (int i=0; i < size; i++)		// copy old data, populate q
				   q[i] = data[i];				// using subscript notation
				size = size * 2;				//update value to reflect doubled size
				delete [] data;			// do not forget to free old smaller array data
				data = q; 		// bind array to the newly created (and populated) pointer
			   }				
		    }				// lack of space, ask for more END (missing from the book)
		total += amount;		// process current valid data...
		data[count++] = amount;	 // ...and get next input value
		} while (true);
	cout << "\n Total of " << count << " values is "	<< total << endl;
	if (count == 0) return 0;		// no results if no input
	cout << "\n Transaction no. Amount\n\n";		// print the table header
	cout.setf(ios::fixed);		// set up fixed format for double
	cout.precision(2);  		//or (if ios::fixed not present) total digits 
	for (int i = 0; i < count; i++)		// go over the data again
	  { 
		cout << setw(4); cout << i+1;			// transaction number
		cout << setw(11); cout << data[i] << endl; 	// transaction value
	  }		
	delete [] data; 		//free memory from the heap (do not rely on Operating System to do it)
	return 0;
}



//Example 6.11 , one missing header for cstrings and one typo mistake 
//the line: strcpy(temp,buf);
//was writen as:  strcpy(temp,buf);}
//It seems that the writer misses often braces , or puts extra braces!
//Also the if (ch == '\n')  { ch = cin.get(); break; }
//is replaced with 
//if (ch == '\n' || ch==-1)  { ch = cin.get(); break; }
//to accomodate the fact that when user press just enter without typing anything first
//(so it is an empty line, and user strikes ENTER key)
//on some systems (my linux including) this is not an '\n' but an EOF =-1
#include <iostream>
#include <cstring>  //missing from the book
using namespace std;
int main(void)
{
	const int LEN = 8; int len=1;		// short array to demonstrate dynamic expansion
	char buf[LEN], *data = 0;		// char-pointer initiallized to zero for first pass
	cout << " Type text, press Enter: \n";
	do 
		{
			cin.get(buf,LEN);	// user data goes into the stack array buf,in LEN-1 character chunks
			len += strlen(buf);		// increase len to len-of-buf+len
			char *temp = new char[len];	// request new un-named heap array,pointed-to by temp
			if (temp == 0)			// heap memory allocation failed?
			  { cout << " Out of memory: program terminated\n";return 0; }	// inform user, exit
			if (data == 0)       //the value of pointer data has remained 0 for the 1st passing
			   strcpy(temp,buf); 		// 1st copy of data from input buffer(will happen only once)
			  else
			   {strcpy(temp,data); strcat(temp,buf); }		//this happens all next times
			delete [] data;						// delete existing array
			data = temp;					// point data to the new array
			cout << " Total: " << len << " , added: " << buf << endl;
			cout << " Dynamic buffer: " << data << endl;			// debug
			char ch = cin.peek();		// what is left in the buffer, after cin.get(buf,LEN); ?
			if (ch == '\n' || ch==-1)	//if it's new line(user wants to finish and pressed enter)... 
			  { ch = cin.get(); break; }	//...we exit the do-while loop
		} while (true);				// or keep going until EOF
	cout << "\n You entered the following line: \n\n";
	cout << data << endl;			// same syntax as for arrays
	delete [] data;
	return 0;
}



//Example 6.12 , header files missing, and a wrong ' at line:
// cout <<"Allocated " << len+1 <<": " << data << endl;
//which in the book is typed as 
// cout <'<"Allocated " << len+1 <<": " << data << endl;
#include <iostream>
#include <cstring>  //missing from the book
//#include <cstdio>   //also missing from book , EOF is defined here as -1. Alternatively, define it:
#define EOF -1
using namespace std;
int main(void)
{
	const int LEN = 8; char buf[LEN];
	int cnt = 0;
	cout << "Enter data (or press Return to end): \n";
	do 
		{			// start of outer loop for input lines
			char *data = new char[1]; data[0] = '\0';   // initially, it is empty,data[0]=0; would also do
			int len = 0;		// initial size is zero
			do {			// start of inner loop for line segments
				 cin.get(buf,LEN);		// get next line segment
				 len += strlen(buf);		// expand total string length
				 char *temp = new char[len+1];
				 strcpy(temp,data); strcat(temp,buf);  //transfer letters
				 delete data;
				 data = temp;		// expand the long line
				 cout <<"Allocated " << len+1 <<": " << data << endl;
				 char ch = cin.peek();		// what is left in the buffer?
				 if (ch == '\n' || ch == EOF)		// quit if if user gave just a new line
				   { ch = cin.get();	break; }	// but first remove this '\n' from input
				} while (true);
			if (len == 0) break;		// end on empty string
			cout << " line " << ++cnt << ": " << data << endl;
			delete [ ] data;
		} while (true);		// continue until break on empty line
	return 0;
}

//A mistake in the text Chapter6 , paragraph : Dynamic Structures
//The book text is like this :
Some programmers dislike dealing with two selection operators, the arrow and the dot. It is all right to use the uniform
notation, (*q).item for q->item and (*q).next for q->next. Parentheses here are necessary because the selection
operator is of higher priority than the dereferencing operator. Hence, *q.item means *(q.next) and this is a syntax error
because the dot selector operator can be applied to a structure variable only (named or unnamed), not to a pointer.
//The last sentence should be corrected with 
    ..... Hence, *q.item means *(q.item) and this is a syntax error
because the dot selector operator can be applied to a structure variable only (named or unnamed), not to a pointer.



//Example 6.13 , improved commants , and correction of an assumption of the book which is NOT correct
#include <iostream>
#include <iomanip>
using namespace std;
typedef double Item;  //So Item is a synonym for double
struct Node { Item item; Node* next; } ;
int main ()
{ 
	int count = 0;			// count of amounts
	Node *data=NULL, *last;		// pointers to beggining and end of list
	do {					// do until EOF causes failure
		  double amount;			// local variable for input
		  cout << " Enter amount (or 0 to finish): ";
		  //if (amount == 0) break;  //the book has this line but it is not needed here
		  cin >> amount;  	// get next double from user
		  if (amount==0) break;	// stop input when user enters 0 as amount
		  Node* q = new Node;		// create new pointer-to-node on the heap
		  if (q == 0)		// test for success of pointer creation
		    { cout << "Out of heap memory" << endl; break; }
		  q->item = amount;		// fill node with program data,that user gave
		  q->next = NULL;		// update what is considered as last element , now it is q. Then we must take care that last->next no longer is NULL
		  (data == NULL ? data : last->next) = q; //if data was 0 then it is the first element  so data=q , else it is an arbitrary element so last->next = q
		  last = q; //last = last->next;  would NOT be ok
		//last = last->next;  is NOT equivalent (contrary to book assumption),segmentation fault happens and the assignment last->next = q; fails to execute
		  count++; 		// increment count
		} while (true);
	cout << "\nTotal of " << count << " values are loaded\n";
	if (count == 0) return 0;		// no output if no  user input. Program just exits.
	cout << "\nNumber Amount Subtotal\n\n";		// print header
	cout.setf(ios::fixed);		// fixed format for double
	cout.precision(2);		// 2 digits after decimal point
	double total = 0;		// initialize total for input amounts
	Node *q = data;		// start at beggining of the list
	for (int i = 0; i < count; i++)		// go over list data
	{ 
		total += q->item;		// accumulate total
		cout.width(3); cout << i+1;	// transaction number
		cout.width(10); cout << q->item;	// transaction value
		cout.width(11); cout << total << endl;	// running total
		q = q->next; 			// idiom to pointing pointer to next node
	}
	Node *p = data, *r = data;		// initialize traversing pointers
	while (p != NULL)		// go on until it runs off the list
	{ 
		p = p->next;		// prevent next node from hanging
		delete r; r = p; 	// delete node, catch up with next
	}
return 0;
}


//Example 6.14 with small corrections , and the additions for checking operations on ofstream object
//as they are proposed in the text of the book after the listing 6.14
#include <iostream>
#include <cstring>  //missing from the book
#include <fstream>  //for ofstream object
#include <cstdio>   //also missing from book , EOF is defined here as -1. Or define it: #define EOF -1
using namespace std;
int main(void)
{
	const int LEN = 8; char buf[LEN];
	int cnt = 0;
	ofstream outpfile("Chap6exampl6_14.out");
	if (outpfile.fail())		// test for success, give up if not
	  { cout << "Cannot open file" << endl; return 0; }
	cout << "Enter data (or press Return to end): \n";
	do 
		{			// start of outer loop for input lines
			char *data = new char[1]; data[0] = '\0';		// initially, it is empty
			int len = 0;		// initial size is zero
			do {			// start of inner loop for line segments
				 cin.get(buf,LEN);		// get next line segment
				 len += strlen(buf);		// expand total string length
				 char *temp = new char[len+1];
				 strcpy(temp,data); strcat(temp,buf);  //transfer letters from data to temp,append buffer after temp
				 delete []data;
				 data = temp;		// expand the long line
				 int ch = cin.peek();		// what is left in the buffer?
				 if (ch == '\n' || ch == EOF)		// quit if  user gave just a new line
				   { ch = cin.get();	break; }	// but first remove this '\n' from input
				} while (true);
			if (len == 0) break;		// end on empty string
			cout << " line " << ++cnt << ": " << data << endl;  //just to inform the user what is going on
			outpfile << data << endl;
			if (outpfile.fail())		// test for success of writing to output file
			  { cout << "Disk is full, output terminated" << endl; break; }
			delete [ ] data;
		} while (true);		// continue until break on empty line
	cout << "Data is saved in file Chap6exampl6_14.out" << endl;
	return 0;
}


//Chapter 7 Function Name Overloading
// After the NOTE , the writer has a discussion about functions that rreturn the maximum
// and he continues with an example of functions that return the minimum of 2 numbers. So he goes :
"Come to think of it, using two functions, maxLong() and maxDouble(), might not
 be such a bad idea. Especially because this is not the end. Let us consider two other overloaded functions.
 int min (int x, int y)		// return the minimum value
   { return x>y ? x : y; }
 double min(double x, double y)	// it is different from int
  { return x>y ? x : y; }
"
But of course these functions do not return the minimum , it is just a copy-paste from the previous discussion.
He forgot to edit and have the functions like this:
 int min (int x, int y)		// return the minimum value
   { return x<y ? x : y; }
 double min(double x, double y)	// it is different from int
  { return x<y ? x : y; }


//Example 8.7 , with small modifications 
//Notice: basic protection against bad user input (for example if user enters letters instead of numbers)
#include <iostream> 		// encapsulation with server functions
using namespace std; 
struct Cylinder { double radius, height; } ; 
void enterData(Cylinder &c, const char *numbertext)  //book doesn't use the const keyword.I use it to avoid a warning of g++ Wall
{ 
	cout << "Enter radius and height of the " << numbertext << " cylinder: ";
	cin >> c.radius >> c.height; 		// initialize cylinder
}
void validateCylinder(Cylinder c)
{ 
	if (c.radius < 0) c.radius = 10;		// defaults for corrupted data
	if (c.height < 0) c.height = 20; 
}
double computeVolume(const Cylinder& c) 		
 { return c.height * c.radius * c.radius * 3.141593; }
void scaleCylinder(Cylinder &c, double factor)		// scale dimensions
 { c.radius *= factor; c.height *= factor; }
void printCylinder(const Cylinder &c)			// print object state
 { cout << "radius: " <<c.radius << " height: " <<c.height <<endl; }
int main()						// pushing responsibility to server functions
{
	Cylinder c1, c2;			// program data
	enterData(c1,"first");		// initialize first cylinder, pass a name : first
	validateCylinder(c1);		// default values for corrupted data
	enterData(c2,"second");		// initialize second cylinder,name : second
	validateCylinder(c2);		// defaults for corrupted data
	if (computeVolume(c1) < computeVolume(c2)) // compare volumes
	{ 
		scaleCylinder(c1,1.2);		// scale it up and
		cout << "\nFirst cylinder changed size\n";	// print size
		printCylinder(c1); 
	}
	else					// otherwise do nothing
    	cout << "No change in first cylinder size" << endl;
	return 0;
}


//Example 8.8 has an small mistake. To be consistent with what the writer tries to explain
//instead of using the line (close to the end) 
cout <<"radius: "<<c1.radius<<" height: "<<c1.height<<endl; 
// he should use this 
cout <<"radius: "<< getRadius(c1) <<" height: "<< getHeight(c1) <<endl; 
//The program compiles of course , and runs normally, but the ideas the author is trying to express are 
//better promoted by my corrected code.


//In examples 8.12 and 8.13 the author has forget the preprocessor directive 
//#include <cstring>
//which is no longer needed since he does not use the function strcpy in those 2 examles. He was 
//using it in 8.10 and 8.11. Also he has omitted a pair of braces in the if statements of the
//while loop , which is not wrong on itself , but it does not make the logic clear 
// and the compiler gives me warning. Also he omitts the usage of const keyword
// for passing the expression as a string in 2 of the functions.
//Here is my polished version (I do not bother to upload 8.11 , only 8.12) 
#include <iostream>			// Encapsulation with info hiding
using namespace std;
struct Store { 			//type definition , no global variable of this struct will be required
	char a[81]; 		// array for temporary storage of opening (left) symbols
	int idx; 			// index to first available slot
} ; 
void initStore (Store &s) 		// initialize the empty store
 { s.idx = 0; } 
bool isEmpty (const Store& s) 	      // check whether the store is empty
 { return (s.idx == 0); } 
void saveSymbol (Store &s, const char x)     // save the opening symbol in the store
 { s.a[s.idx++] = x; } 
char getLast(Store &s)			// get back the last symbol saved
 { return s.a[--s.idx]; } 
bool isLeft (char c) 			// check if it is a left (opening) symbol
 { return (c=='(' || c=='['); } 
bool isRight (char c)			// check if it is a right (closing) symbol
 { return (c==')' || c==']'); }
bool symbolsMatch (char c, char sym)
 { return (sym=='('&&c==')')||(sym=='['&&c==']');}
bool checkParen (const char buffer[])
{ 
	Store store;				//local variable
	char c,sym; int i=0; bool valid=true;
	initStore(store); 
	while (buffer[i] != '\0' && valid)
	 { 
		c = buffer[i];
	 	if (isLeft(c)) { saveSymbol(store,c); }
	 	else if (isRight(c))
		 {
	 		if (!isEmpty(store))
	 		  { 
				 sym = getLast(store);
	 			 if (!symbolsMatch(c,sym)) valid = false; 
			  }
	 		else
			  valid = false;
		 }
		i++; 
	 }
	if (store.idx>0) valid=false;
	return valid; 
}
void checkParenTest(const char expression[])
{ 
	cout << "Expression " << expression << endl;		// print expression for the user to see it
	if (checkParen(expression))	cout << "is valid\n";	// validate it,calling function checkParen(expr)								
	else cout << "is not valid\n"; 
}
int main()
{
	checkParenTest("a=(x[i]+5)*y;");
	checkParenTest("a=(x[i)+5]*y;");
	checkParenTest("a=(x(i]+5]*y;");
	return 0;
}



// Here is a working implementation of the example9.2 , with multiple files
// First the file with class definition, in which only the function member prototypes are declared
// and will be defined(implemented) in seperate file
//chap9example2.h file
#ifndef CYLINDER_H
#define CYLINDER_H
#include <iostream>
using namespace std;
struct Cylinder 		
{ 
	double radius, height; 				// member data 
	void setCylinder( double r, double h);	//4 member functions , only declarations here
	double getVolume();
	void scaleCylinder( double factor);
	void printCylinder(); 
} ;
#endif

//chap9example2functions.h file for function implementations 
#include <iostream>
#include "chap9example2.h"    //struct and function declarations there
inline void Cylinder::setCylinder( double r, double h)	
 { radius = r; height = h; }
inline double Cylinder::getVolume()
 { return height * radius * radius * 3.141593; }
inline void Cylinder::scaleCylinder( double factor)
 { radius *= factor; height *= factor; }
inline void Cylinder::printCylinder() 
 { cout << "radius: " << radius << " height: " << height <<endl; }

//chap9example2.cpp file , for main()
#include <iostream>
#include "chap9example2functions.h"
int main()  			
{ 
	Cylinder c1, c2;
	c1.setCylinder(10,30); c2.setCylinder(20,30);
	cout << "\nInitial size of first cylinder\n";
	c1.printCylinder();
	if (c1.getVolume() < c2.getVolume())  
	  { 
		c1.scaleCylinder(1.2);
		cout << "\nFirst cylinder changed size\n";
		c1.printCylinder(); 
	  }
	else  cout << "\nNo change in first cylinder size" << endl;
	return 0;
}
// Build it as usual , while in the directory that contains the files :
// g++ -Wall -o chap9example2 chap9example2.cpp

//Example 9.3
// the code in the book misses 2 headers , I also implemented with class instead of struct Name , that the book does.
#include <iostream>
#include <cstring>
#include <cstdlib>		//for exit(1)
using namespace std;
class Name {
	char *contents;			// public pointer to dynamic memory
  public:
	Name (const char* name);	// Constructor could be also implemented as : Name (const char name []); 
	void show_name();
	~Name();				// destructor eliminates memory leak
} ;
Name::Name(const char* name)		// conversion constructor
{ 
	int len = strlen(name);			// number of characters,without the final '\0'
	contents = new char[len+1];		// allocate dynamic memory,accomodate for the extra '\0'
	if (contents == NULL)			// if 'new' was not successful...
	 { cout << "Out of memory\n"; exit(1); }		// ...give up
	strcpy(contents, name);			// standard set of actions
	cout << "object created: " << contents << endl;  // debugging message
}
void Name::show_name()
 { cout <<contents << "\n"; }
Name::~Name()				// destructor
{ 
	cout << "object destroyed: " << contents << endl;		// debugging message
	delete contents; 		// deletes heap memory, not pointer 'contents'
}
void Client()
{ 
	Name n1("Jones");				// conversion constructor is called
	Name *p = new Name("Smith");		// conversion constructor is called for unnamed object
	n1.show_name(); p->show_name();
	delete p;				// destructor for object pointed to by p is called ,so Smith is gone
}						// p is deleted, destructor for object n1 is called (Jones is gone)
int main()
{ 
	Client();
	return 0;
}


//Example 9.6
//I expand the example by using the samePoints function that is mentioned in the text
//after the actual example.I use the move function also. 
#include <iostream>
using namespace std;
class Point {
	int x, y;						// private coordinates
	static int count ;	
  public:
	Point(int a=0, int b=0)		// general constructor
	 { x = a; y = b; count++; cout << " Point created: x=" << x << " y=" << y << endl; }
	static int quantity()						
 	 { return count; }
	static bool samePoints(const Point &p1, const Point &p2)
	 { return p1.x == p2.x && p1.y == p2.y; }
	void set (int a, int b)			// modifier function, assings values to a point x and y coordinates
	 { x = a; y = b; }
	void get(int& a, int& b) const	// selector function
	 { a = x; b = y; }
	void move(int a, int b)		// modifier function, changes a points coordinates by a specified value
	 { x += a; y += b; }
	~Point()						// destructor
	 { count--; cout << " Point destroyed: x=" << x << " y=" << y << endl; }
} ;
int Point::count = 0 ;			//Important to define and initialize it here, before main
int main()
{ 
	cout << "Number of points: " << Point::quantity() << endl;
	Point *p = new Point(80,90);			// dynamically allocated object
	Point p1, p2(30), p3(50,70);    		// origin, x-axis, general point
	cout << "Number of points: " << p3.quantity() << endl; //p1.quantity() would give same result : 4
	if(Point::samePoints(p1,p3)==true) cout << "Same point p1 and p3\n";
	 else cout << "Not same point p1 and p3\n";
	p3.move(30,20);
	if(Point::samePoints(*p,p3)==true) cout << "Same point *p and moved p3\n";
	 else cout << "Not same point *p and moved p3\n";
	delete p;			//this is not mentioned in example 9.5
	return 0;		
}		


//Example 11.2 
#include <iostream>
#include <cstring> //book forgets it
#include <cstdlib> //book forgets it
using namespace std;
class String 
{
	char *str;					// dynamically allocated char array
	int len;
  public:
	String (int length=0);		//conversion/default constructor
	String(const char*);		//conversion constructor
	~String ();			//deallocate dynamic memory
	void modify(const char*);	//change the array contents
	char* show() const;		//returns a pointer to the array.Better would be: const char* show() const;
} ;
String::String(int length)
{ 
	len = length;
	str = new char[len+1];		// default size is 1
	if (str==NULL) exit(1);		// test for success
	str[0] = '\0'; 			// empty String 
} 
String::String(const char* s)
{ 
	len = strlen(s);		 //measure length [not including final '\0'] of incoming text s
	str = new char[len+1];	         //allocate enough heap space [to accomodate for closing '\0']...
	if (str==NULL) exit(1);
	strcpy(str,s); 			//... and copy text into new heap memory [strcpy includes the terminating '\0']
} 
String::~String()
{ delete [] str; }     	// return heap memory. The book has it as : delete str;
void String::modify(const char a[])		// no memory management here
{ 					//In the next 2 lines , the book has len-1 which is not correct.
	strncpy(str,a,len);		// protect from overflow:copies from incoming a only as many chars as str can take
	str[len] = '\0'; 		// terminate String properly with trailing 0
} 
char* String::show() const   //The improved version (to prevent client code abuse) would be: const char* String::show() const
{ return str; } 	
int main()
{
	String u("This is a test.");
	String v("Nothing can go wrong.");
	cout << " u = " << u.show() << endl;		//result is OK 
	cout << " v = " << v.show() << endl;		//result is OK
	v.modify("Let us hope for the best.");		//input is truncated if necessary
	cout << " v = " << v.show() << endl;
	//strcpy(u.show(),"This is a very long string!");	//client code abuse: Compiles,but :Run time errors
	//cout << " u = " << u.show() << endl;
	strncpy(u.show(),"Hi there,that is very long",strlen(u.show())); //still bad practice,should use only modify()
        //With the improoved header for show(), the above inappropriate use show() would be flaged as error by the compiler
	cout << " u = " << u.show() << endl;
	return 0;
}

Correction in the text of chapter 11.
After Figure 11.9 , the text says :
"Figure 11-9, which shows the whole truth, includes a local object s whose data members are initialized to the values of the
actual argument v. Figure 11-9(a) shows that this local object v and the actual argument u share the same section of the heap
memory."
It is easy to realize that the 2nd sentence was meant to say :
"Figure 11-9(a) shows that this local object s and the actual argument v share the same section of the heap memory."


//Example 11.7 , with First Remedy and Second Remedy.
//Also some additional code of mine , to use the modify() call.
#include <iostream>
#include <cstring> //book forgets it
#include <cstdlib> //book forgets it
using namespace std;
class String 
{
	char *str;
	int len;
	char* allocate(const char* s)
	 { 
		char * p = new char[strlen(s) + 1 ];
		if (p==NULL) exit(1);
		strcpy(p,s);
		return p; 
	 }
  public:
	String (int length=0);		//conversion+default constructor
	String(const char*);		//conversion constructor char[]->String
	String(const String& s);	//copy constructor String to String
	~String ();
	void operator += (const String&);
	const String& operator = (const String&);	//assignement operator String1 = String2
	const String& operator = (const char []);   //assignement  for chars
	void modify(const char*);
	bool operator == (const String&) const;
	const char* show() const;
} ;
String::String(int length)
 { len = length; str = allocate(""); }
String::String(const char* s)
{ 
	len = strlen(s);
	str = allocate(s);
	cout << " Created: '" << str <<"'\n"; 
}
String::String(const String& w)
{ 
	len = w.len;
	str = allocate(w.str);
	cout << " Copied: '" << str <<"'\n"; 
}
String::~String()
{ delete str; }
void String::operator += (const String& w)
{ 
	len = strlen(str) + strlen(w.str);
	char* p = new char[len + 1];
	if (p==NULL) exit(1);
	strcpy(p,str);
	strcat(p,w.str);
	delete str;
	str = p; 
}
const String& String::operator = (const String& w)
{ 
	if (&w == this) return *this;		// test for self-assignment String1=String1 
	delete str;						//you don't do it in copy constructor
	len = w.len;					// copy non-pointer data
	str = allocate(w.str);			// allocate space, copy incoming text
	cout << " Assigned: '" << str <<"'\n";		// debugging purpose message
	return *this; 					// return the target object to client
}
const String& String::operator = (const char s[])
{
	delete str;
	len=strlen(s);
	str=allocate(s);
	cout << "Asigned (from char arr): ' " << str << " '\n";
	return *this; 
}
bool String::operator==(const String& w) const
{ return strcmp(str,w.str)==0; }
const char* String::show() const
{ return str; }   		
void String::modify(const char s[])
{ 
	strncpy(str,s,len);				// protect from overflow
	str[len] = '\0';  				// terminate String properly
}
String enterData()
{ 
	cout << " Enter city to find: ";   
	char data[200];
	cin >> data;
	return String(data); 			//conversion constructor is called
} 
int main()
{ 
	cout << endl << endl;
	enum { MAX = 4} ;
	String data[MAX];					// database of objects
	const char *c[MAX] = { "Atlanta", "Boston", "Chicago", "Denver" };
	for (int j=0; j<MAX; j++)
	 { data[j] = c[j]; }				// assignment:data[j].operator=(c[j]);
	String u  ; int i; 
	char newcity[100] ;					// char * newcity ;  gives a run-time segmentation fault
	u = enterData();				// it needs assignment and not copy constructor
	for (i=0; i<MAX; i++)
	 { if (data[i] == u) break; }		//meaning: if (data[i].operator==(u))
	if (i == MAX)
		cout << " City " << u.show() << " is not found\n";
	else
	  {
		cout << " City " << u.show() << " is found\n";
		cout << " Enter the modified name of that city : " ;
		cin >> newcity ;
		u.modify(newcity);
		cout << "New name : " << u.show() << endl;   //truncated if user gives name longer than initial name of city
	  }
	return 0;
}


//Example 11.8 full
#include <iostream>
#include <cstring> 
#include <cstdlib> 
using namespace std;
class Window 
{
	char *str;
	int len;
	Window(const Window& );       //this and next functions only to provide syntax errors
	Window& operator = (const Window &);  // and protect abuse in the client code
  public:
	Window()
	 { len = 0; str = new char[len]; str[0]= 0 ; }
	~Window()
	 { delete str; }
	void operator += (const char s[])
	 { 
		len = strlen(str) + strlen(s);
		char* p = new char[len + 1];
		if (p==NULL) exit(1);
		strcpy(p,str); strcat(p,s);
		delete str; 
		str = p; 
	 }
	const char* show() const  //allowed display function
	 { return str; } 
} ;

void display(const Window  wind)	//do not pass objects by value,using this gives compile errors
 { cout << wind.show(); }

int main()
{ 
	Window w1; 
	w1 += "Welcome, Dear Customer!\n";       // reasonable and accepted usage
	//Window w2 = w1;			// unreasonable usage:gives syntax error
	///Window w2; 
	///w2 = w1;			//even less reasonable usage: gives syntax error
	////display(w1);			// pass by value gives syntax error
	cout << w1.show() << endl;       //correct way to display
	return 0;
}
